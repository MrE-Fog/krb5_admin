#!/usr/pkg/bin/perl
#

use File::Temp qw/ :mktemp /;
use Getopt::Std;

use Krb5Admin::C;
use Krb5Admin::Client;
use Krb5Admin::KerberosDB;
use Krb5Admin::Krb5Host::Local;
use Krb5Admin::Utils qw/host_list/;
use Sys::Hostname;

use warnings;
use strict;

my $verbose = 0;

our $ctx;
our $expand_srvloc = 0;
our $use_master = 0;

my $vfmt = "   %- 22.22s %- 25.25s %s\n";

sub HELP_MESSAGE {
	exec("man krb5_prestash");
	exit(1);
}

sub warning {
	my ($format, @args) = @_;
	my $num = 50;
	my $text = sprintf($format, @args);

	for my $line (split(/(.{$num}.+?)\s/, $text)) {
		print STDERR "WARNING: $line\n"	if $line ne "";
	}
}

sub qualify_princ {
	my ($princstr) = @_;

	if (!defined($princstr)) {
		die "qualify_princ called on undefined value.\n"
	}

	my @princ = Krb5Admin::C::krb5_parse_name($ctx, $princstr);

	return join('/', @princ[1..$#princ]) . '@' . $princ[0];
}

sub fetch {
	my ($kmdb, @realms) = @_;

	if ($> != 0) {
		die "Only root can run fetch.\n";
	}

	my $khost = Krb5Admin::Krb5Host::Local->new(kmdb => $kmdb,
	    invoking_user => 'root');

	$khost->fetch_tickets(@realms);
}

sub query {
	my ($kmdb, $type, $arg) = @_;

	$type = 'principal'	if defined($type) && $type eq 'user';
	$type = 'principal'	if defined($type) && $type eq 'proid';

	if (!defined($type) || ($type ne 'host' && $type ne 'principal')) {
		die "Must supply a type of either host or principal\n";
	}

	if (!defined($arg)) {
		die "Missing argument of type $type.\n";
	}

	$arg = qualify_princ($arg)	if $type eq 'principal';

	if (!defined($kmdb) && $type eq 'principal') {
		my ($realm) = Krb5Admin::C::krb5_parse_name($ctx, $arg);
		$kmdb = Krb5Admin::Client->new(undef, {realm=>$realm});
	}

	if (!defined($kmdb)) {
		$kmdb = Krb5Admin::Client->new();
	}

	if ($use_master) {
		$kmdb->master();
	}

	my %args;
	$args{expand} = 1	if $expand_srvloc;
	$args{verbose} = 1	if $verbose;
	$args{$type} = $arg	if defined($type);

	my $out = $kmdb->query_ticket(%args);

	if (!$verbose && defined($type)) {
		print map { "$_\n" } @$out;
		return;
	}

	if (!$verbose) {
		for my $p (keys %$out) {
			print $p . " " . join(' ', @{$out->{$p}}) . "\n";
		}
		return;
	}

	printf($vfmt, "Principal", "Configured", "Target");
	printf($vfmt, "---------", "----------", "------");

	for my $p (keys %$out) {
		for my $host (@{$out->{$p}}) {
			printf($vfmt, $p, @$host)	if @$host == 2;
			printf($vfmt, $p, '', @$host)	if @$host == 1;
		}
	}
}

sub insert {
	my ($kmdb, $princ, @hosts) = @_;

	if (!defined($princ)) {
		die "Missing argument principal.\n";
	}

	if (!defined($kmdb)) {
		my ($realm) = Krb5Admin::C::krb5_parse_name($ctx, $princ);
		$kmdb = Krb5Admin::Client->new(undef, {realm=>$realm});
	}

	# XXXrcd: put in the warnings and FQDNification?  Maybe.

	$kmdb->insert_ticket(qualify_princ($princ), @hosts);
}

sub refresh {
	my ($kmdb, $princ, @hosts) = @_;

	if (!defined($princ)) {
		die "Missing argument principal.\n";
	}

	if (@hosts == 0) {
		@hosts = (hostname());
	}

	if (!defined($kmdb)) {
		my ($realm) = Krb5Admin::C::krb5_parse_name($ctx, $princ);
		$kmdb = Krb5Admin::Client->new(undef, {realm=>$realm});
	}

	# XXXrcd: put in the warnings and FQDNification?  Maybe.

	$kmdb->refresh_ticket(qualify_princ($princ), @hosts);
}

sub remove {
	my ($kmdb, $princ, @hosts) = @_;

	if (!defined($princ)) {
		die "Missing argument principal.\n";
	}

	if (!defined($kmdb)) {
		my ($realm) = Krb5Admin::C::krb5_parse_name($ctx, $princ);
		$kmdb = Krb5Admin::Client->new(undef, {realm=>$realm});
	}

	$kmdb->remove_ticket(qualify_princ($princ), @hosts);
}

#
# Usage
#

sub usage {
	print STDERR "usage: krb5_prestash [-Elv] [-h <hostspec> " .
	    "| -r realm | -l] <command>\n";
	print STDERR "    where <command> is:\n\n";

	print STDERR "\tinsert <principal> <host>[ <host>]*\n";
	print STDERR "\tremove <principal> <host>[ <host>]*\n";
	print STDERR "\tquery [\"principal\"|\"host\"] " .
	    "[<principal>|<host>]\n";
	print STDERR "\tfetch\n";

	print STDERR "\n    Synonyms: add = insert, delete = remove\n";
	exit(1);
}

#
# Main
#

# Parse arguments

my %cmds = (
	fetch	=> \&fetch,
	insert	=> \&insert,
	add	=> \&insert,
	refresh	=> \&refresh,
	remove	=> \&remove,
	del	=> \&remove,
	query	=> \&query,
);

our %opts;
my @kdcs;
my $realm;

getopts('EMh:lr:v', \%opts);

$use_master = 1    if defined($opts{M});
@kdcs = ($opts{h}) if defined($opts{h});
$realm = $opts{r}  if defined($opts{r});
$expand_srvloc = 1 if defined($opts{E});
$expand_srvloc = 1 if defined($opts{v});	# -v ==> -E
$verbose = 1       if defined($opts{v});

if (@kdcs + ($opts{l}?1:0) + ($opts{r}?1:0) > 1) {
	print STDERR "-h, -l, and -r are mutually exclusive.\n";
	usage();
}

my $command = shift @ARGV;
if (!defined($command)) {
	usage();
}

#
# BROKEN:

my $cmd = $cmds{$command};
if (!defined($cmd)) {
	print STDERR "No such command: $command.\n\n";
	usage();
}

$ctx = Krb5Admin::C::krb5_init_context();

eval {
	my $kmdb;
	if (defined($opts{l})) {
		$kmdb = Krb5Admin::KerberosDB->new(local => 1);
	}
	if (@kdcs || defined($realm)) {
		my %args;
		my $clnt;
		if ($cmd eq 'fetch') {
			$clnt = 'host/' . [host_list(hostname())]->[0];
		}
		$args{realm} = $realm	if defined($realm);
		$kmdb = Krb5Admin::Client->new($clnt, \%args, @kdcs);
	}
	&$cmd($kmdb, @ARGV);
};

if (my $err = $@) {
	print STDERR "ERROR: ";
	if (ref($err) eq 'ARRAY') {
		print STDERR join(' ', @{$err});
		print STDERR "\n";
		exit(1);
	}
	if (ref($err) eq '' || $@->isa('Error')) {
		print STDERR $err;
		print STDERR "\n";
		exit(1);
	}
	print STDERR "Can't display error.\n";
	exit(1);
}

exit(0);
