#!/usr/pkg/bin/perl

use IO::File;

use Getopt::Std;
use Socket;
use Sys::Hostname;
use Sys::Syslog;

use Kharon::Protocol::ArrayHash;
use Kharon::Engine::Server;

use Krb5Admin::KerberosDB;
use Krb5Admin::Log;

use strict;
use warnings;

use constant {
	KRB5_ADMIND_CONFIG	=> '/etc/krb5/krb5_admind.conf',
};

my $master;

sub who_is_master {
	my $fh = IO::File->new('/etc/krb5/master', 'r');
	if (!defined($fh)) {
		print STDERR "Can't open /etc/krb5/master: $!\n";
		$fh = IO::File->new('master', 'r') or
		    die "can't open ./master: $!";
	}

	my $master = <$fh>;
	chomp($master);
	$master;
}

sub am_i_master { hostname() eq $master }

sub usage {

	print STDERR "Usage: krb5_admind [-M] [-a acl_file] [-d dbname] " .
	    "[-m master]\n";
	exit(1);
}

openlog('krb5_admind', 'pid', 'auth');

our $acl_file;
our $config = KRB5_ADMIND_CONFIG;
our $dbname;
our %xrealm_bootstrap;

our %opts;
getopts('MPa:c:d:m:', \%opts) or usage();

$master   = hostname()		if  defined($opts{M});
$master   = $opts{m}		if !defined($master);
$master   = who_is_master()	if !defined($master);
$acl_file = $opts{a}		if  defined($opts{a});
$dbname   = $opts{d}		if  defined($opts{d});
$config   = $opts{c}		if  defined($opts{c});

if (-f $config || defined($opts{c})) {
	my $ret = do $config;
	die "Couldn't parse $config: $@\n"	if $@;
	die "Couldn't find $config\n"		if ! -f $config;
}

sub mk_kmdb {
	my %args = @_;

	my %kmdb_args;
	$kmdb_args{client}	     = $args{CREDS};
	$kmdb_args{addr}	     = $args{REMOTE_IP};
	$kmdb_args{xrealm_bootstrap} = \%xrealm_bootstrap;
	$kmdb_args{acl_file}	     = $acl_file;
	$kmdb_args{dbname}	     = $dbname;

	return Krb5Admin::KerberosDB->new(%kmdb_args);
}

my $logger = Krb5Admin::Log->new();
my $ahr = Kharon::Protocol::ArrayHash->new(banner => { version => '2.0' } );
my $pes = Kharon::Engine::Server->new(protocols => [$ahr], logger => $logger);
$pes->Connect();

my @rw_cmds = qw/	master
			create
			create_user
			change
			enable
			disable
			remove 
			create_host
			remove_host
			insert_hostmap
			remove_hostmap
			insert_ticket
			remove_ticket
		/;
my @ro_cmds = qw/	list
			listpols
			fetch
			mquery
			query
			query_ticket
			fetch_tickets
			query_hostmap
			query_host
		/;

my %args;
$args{cmds}	= [@rw_cmds, @ro_cmds];
if (!am_i_master()) {
	$args{next_server} = { PeerAddr => $master };
	$args{refercmds} = [@rw_cmds];
}

if ($opts{P}) {
	$args{object}	= \&mk_kmdb;
	$pes->RunKncAcceptor(%args);
} else {
	$args{object}	= &mk_kmdb(CREDS => $ENV{KNC_CREDS},
	    REMOTE_IP => $ENV{KNC_REMOTE_IP});
	syslog('info', '%s connected from %s', $ENV{'KNC_CREDS'},
	    $ENV{KNC_REMOTE_IP});
	$pes->RunObj(%args);
}
